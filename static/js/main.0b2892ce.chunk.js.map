{"version":3,"sources":["Timer.js","Main.js","serviceWorker.js","index.js"],"names":["Timer","pause","initialDate","useState","clock","setClock","working","setWorking","minutesToRun","setMinutesToRun","pomodoros","setPomodoros","useEffect","Notification","interval","setInterval","now","Date","getTime","distance","minutes","Math","floor","seconds","clearInterval","Main","setPause","undefined","setIninitalDate","requestPermission","className","onClick","width","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAGaA,G,KAAQ,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAAkB,EACrBC,mBAAS,SADY,mBACxCC,EADwC,KACjCC,EADiC,OAEjBF,oBAAS,GAFQ,mBAExCG,EAFwC,KAE/BC,EAF+B,OAGPJ,mBAAS,GAHF,mBAGxCK,EAHwC,KAG1BC,EAH0B,OAIbN,mBAAS,GAJI,mBAIxCO,EAJwC,KAI7BC,EAJ6B,KA0C/C,OApCAC,qBAAU,WACU,IAAdF,GACFC,EAAa,GACbF,EAAgBD,EAAe,IAC/BH,EAAS,SAELH,GAAa,IAAIW,aAAa,uBAE9BP,GAASK,EAAaD,EAAY,GAEtCD,EAAgBD,GADKF,EAAU,GAAK,IAEpCD,EAASC,EAAU,QAAU,QAEzBJ,GAAa,IAAIW,aAAaP,EAAW,iBAAmB,mBAEjE,CAACA,IAEJM,qBAAU,WACR,IAAKX,GAAmB,QAAVG,EAAiB,CAC7B,IAAMU,EAAWC,aAAY,WAC3B,IAAMC,GAAM,IAAIC,MAAOC,UACjBC,EAAYjB,EAA6B,IAAfM,EAAwBQ,EAClDI,EAAUC,KAAKC,MAAOH,EAAQ,KAAT,KACrBI,EAAUF,KAAKC,MAAOH,EAAQ,IAAkB,KAEtC,IAAZC,GAA6B,IAAZG,GACnBC,cAAcV,GACdP,GAAYD,IAEZD,EAASe,EAAU,IAAMG,KAE1B,KACH,OAAO,kBAAMC,cAAcV,OAE5B,CAACV,EAAOF,IAGT,8BACGE,KCTQqB,MAlCf,WAAkB,IAAD,EACWtB,oBAAS,GADpB,mBACRF,EADQ,KACDyB,EADC,OAEwBvB,wBAASwB,GAFjC,mBAERzB,EAFQ,KAEK0B,EAFL,KAaf,OATAhB,qBAAU,WACRC,aAAagB,uBASb,oCACE,iCACA,yBAAKC,UAAU,aACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAO7B,MAAOA,EAAOC,YAAaA,MAGtC,yBAAK4B,UAAU,MAAMC,QAdb,WACZH,GAAgB,IAAIX,MAAOC,WAC3BQ,GAAUzB,KAaHA,EACG,yBAAK+B,MAAM,OAAOC,IAAI,4BAA4BC,IAAI,0BACtD,yBAAKF,MAAM,OAAOC,IAAI,mBAAmBC,IAAI,4BAIrD,mCCrBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0b2892ce.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { formatTime } from './services/timerFormater'\n\nexport const Timer = ({ pause, initialDate }) => {\n  const [clock, setClock] = useState('25:00')\n  const [working, setWorking] = useState(true)\n  const [minutesToRun, setMinutesToRun] = useState(0)\n  const [pomodoros, setPomodoros] = useState(0)\n\n  useEffect(() => {\n    if (pomodoros === 4) {\n      setPomodoros(0)\n      setMinutesToRun(minutesToRun + 15)\n      setClock('15:00')\n      // eslint-disable-next-line\n      if (initialDate) new Notification('Take a long break')\n    } else {\n      if (working) setPomodoros(pomodoros + 1)\n      const minutesToAdd = working ? 25 : 5\n      setMinutesToRun(minutesToRun + minutesToAdd)\n      setClock(working ? '25:00' : '5:00')\n      // eslint-disable-next-line\n      if (initialDate) new Notification(working ?  'Focus on code!' : 'Take a break')\n    }\n  }, [working])\n\n  useEffect(() => {\n    if (!pause && clock !== '0:0') {\n      const interval = setInterval(() => {\n        const now = new Date().getTime()\n        const distance = (initialDate + minutesToRun * 60000) - now\n        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))\n        const seconds = Math.floor((distance % (1000 * 60)) / 1000)\n\n        if (minutes === 0 && seconds === 0) {\n          clearInterval(interval)\n          setWorking(!working)\n        } else {\n          setClock(minutes + ':' + seconds)\n        }\n      }, 900)\n      return () => clearInterval(interval)\n    }\n  }, [clock, initialDate])\n\n  return (\n    <span>\n      {clock}\n    </span>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport './main.css'\nimport { Timer } from './Timer'\n\nfunction Main () {\n  const [pause, setPause] = useState(true)\n  const [initialDate, setIninitalDate] = useState(undefined)\n\n  useEffect(() => {\n    Notification.requestPermission()\n  })\n\n  const start = () => {\n    setIninitalDate(new Date().getTime())\n    setPause(!pause)\n  }\n\n  return (\n    <>\n      <header />\n      <div className='container'>\n        <div className='circle'>\n          <div className='inner-circle'>\n            <Timer pause={pause} initialDate={initialDate}/>\n          </div>\n        </div>\n        <div className='btn' onClick={start}>\n          {pause\n            ? <img width='50px' src=\"play-button-arrowhead.svg\" alt=\"Kiwi standing on oval\"></img>\n            : <img width='50px' src=\"pause-button.svg\" alt=\"Kiwi standing on oval\"></img>\n          }\n        </div>\n      </div>\n      <footer />\n    </>\n  )\n}\n\nexport default Main\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './Main'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}